# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    X = random.randrange(120,240)
    Y = random.randrange(60,180)
    
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel = [X / 60.0, -Y /60.0]

    if direction == LEFT:
         ball_vel[0] = -ball_vel[0]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, paddle_vel  # these are numbers
    global score1, score2  # these are ints    
    
    score1 = 0
    score2 = 0
    paddle1_pos = [0, HEIGHT / 2]
    paddle2_pos = [WIDTH, HEIGHT / 2]
    paddle1_vel = 0
    paddle2_vel = 0
    paddle_vel = 5
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    if ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] = - ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,1,"White","Pink")
    
    # update paddle's vertical position, keep paddle on the screen
    global paddle1_vel, paddle2_vel
    if (paddle1_pos[1] <= (HEIGHT-HALF_PAD_HEIGHT) and paddle1_vel > 0) or (
        paddle1_pos[1] >= HALF_PAD_HEIGHT and paddle1_vel < 0):
        paddle1_pos[1] += paddle1_vel
    if (paddle2_pos[1] <= (HEIGHT-HALF_PAD_HEIGHT) and paddle2_vel > 0) or (
        paddle2_pos[1] >= HALF_PAD_HEIGHT and paddle2_vel < 0):
        paddle2_pos[1] += paddle2_vel 
    
   
    
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos[1] - HALF_PAD_HEIGHT),
                        (PAD_WIDTH, paddle1_pos[1] - HALF_PAD_HEIGHT),
                       (PAD_WIDTH, paddle1_pos[1] + HALF_PAD_HEIGHT),
                        (0, paddle1_pos[1] + HALF_PAD_HEIGHT)],1,'White','Green')
    
    canvas.draw_polygon([(WIDTH-PAD_WIDTH,paddle2_pos[1]-HALF_PAD_HEIGHT),
                        (WIDTH,paddle2_pos[1]-HALF_PAD_HEIGHT),
                       (WIDTH,paddle2_pos[1]+HALF_PAD_HEIGHT),
                        (WIDTH-PAD_WIDTH,paddle2_pos[1]+HALF_PAD_HEIGHT),],1,'White','Green')
    
    # determine whether paddle and ball collide   
    
    if ((ball_pos[0]-BALL_RADIUS) <= PAD_WIDTH) or ((ball_pos[0]+BALL_RADIUS) >= WIDTH - PAD_WIDTH):
        ball_vel[0] = -ball_vel[0]
        if ball_pos[0] < WIDTH / 2:
            
            if ball_pos[1] < (paddle1_pos[1]-HALF_PAD_HEIGHT) or ball_pos[1] > (paddle1_pos[1] + HALF_PAD_HEIGHT):
                score2 += 1
                spawn_ball(RIGHT)
            else:
                ball_vel[0] += 0.1 * ball_vel[0]
        if ball_pos[0] > WIDTH / 2:
            if ball_pos[1] < (paddle2_pos[1]-HALF_PAD_HEIGHT) or ball_pos[1] > (paddle2_pos[1] + HALF_PAD_HEIGHT):
                score1 += 1
                spawn_ball(LEFT)
            else:
                ball_vel[0] += 0.1 * ball_vel[0]
        
            
    
    # draw scores
    canvas.draw_text(str(score1),[150,100],60,'Orange')
    canvas.draw_text(str(score2),[450,100],60,'Orange')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -paddle_vel       
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = paddle_vel
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = -paddle_vel       
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = paddle_vel
    
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel = 0
    paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button = frame.add_button('Restart',new_game,100)

# start frame
new_game()
frame.start()
