# 6.00 Problem Set 3
# 
# Hangman game
#

# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)

'''
There are four important pieces of information you may wish to store:

secretWord: The word to guess.

lettersGuessed: The letters that have been guessed so far.

mistakesMade: The number of incorrect guesses made so far.

availableLetters: The letters that may still be guessed.

Every time a player guesses a letter, 
the guessed letter must be removed from availableLetters 
(and if they guess a letter that is not in availableLetters, 
you should print a message telling them they've already guessed that - so try again!).
'''


import random
import string

WORDLIST_FILENAME = "C:/Users/Administrator/Desktop/exercise/mit course/hangman/words.txt"  

def loadWords():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print "Loading word list from file..."
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r', 0)
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = string.split(line)
    print "  ", len(wordlist), "words loaded."
    return wordlist

def chooseWord(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    return random.choice(wordlist)


wordlist = loadWords()

def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    
    s = ''
    for letter in secretWord:
        if letter in lettersGuessed:
            s = s + letter
    return s == secretWord    


def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    
    s = ''
    for i in secretWord:
        if i in lettersGuessed:
            s = s + i
        else:
            s = s + '_ '
    return s


def getAvailableLetters(lettersGuessed):
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters have not
      yet been guessed.
    '''
    
    import string
    
    s = ''
    p = string.ascii_lowercase
    for i in range(0,len(p)):
        if p[i]  not in lettersGuessed:
            s = s + p[i]
    return s
    

def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''

    
    a = ''
    b = ''    
   
    i = 8

    print 'Welcome to the game, Hangman!'
    print 'I am thinking of a word that is ' + str(len(secretWord)) + ' letters long.'
    print '-------------'
    print 'You have ' + str(i) +' guesses left.'
    print 'Available letters: ' + getAvailableLetters(b)
    letters = raw_input('Please guess a letter: ')
    lettersGuessed = letters.lower()
       
    
    while i > 0:
            
          
        if lettersGuessed not in getAvailableLetters(b):
            print "Oops! You've already guessed that letter:" + getGuessedWord(secretWord, a)  
               
        elif lettersGuessed in secretWord:
            a = a + lettersGuessed
            b = b + lettersGuessed
            print 'Good guess: ' + getGuessedWord(secretWord, a)
            if isWordGuessed(secretWord, a):
                print 'Congratulations, you won!'
                break                
            i -= 1
           
        else:
            b = b + lettersGuessed
            i -= 1
            print 'Oops! That letter is not in my word: ' + getGuessedWord(secretWord, a)  
            
        if i != 0:
            print '------------'
            print 'You have ' + str(i) + ' guesses left.'
            print 'Available letters: ' + getAvailableLetters(b)
            letters= raw_input('Please guess a letter: ')
            lettersGuessed = letters.lower()
            
        else:
            print 'Sorry, you ran out of guesses. The word was ' + secretWord +'.'
            break  
        
       
        
secretWord = chooseWord(wordlist).lower()        
hangman(secretWord)
        
        
    





